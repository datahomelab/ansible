---
- hosts: all
  remote_user: christian
  become: yes
  become_method: sudo
  vars:
    base_dir: /home/christian

  tasks:

  - name: Uninstall X11 and Unnecessary Packages for k8s
    apt:
      name: "{{ item }}"
      state: absent
      update_cache: true
    with_items:
      - x11-common
      - bluez
      - gnome-menus
      - gnome-icon-theme
      - gnome-themes-standard
      - hicolor-icon-theme
      - gnome-themes-extra-data
      - bluealsa
      - cifs-utils
      - desktop-base
      - desktop-file-utils
      - alsa-utils
      - wpasupplicant
      - avahi-daemon

  - name: Clean unwanted old stuff
    apt:
      autoremove: yes
      purge: yes

  - name: Upgrade all apt packages
    apt: upgrade=dist force_apt_get=yes

  - name: Check if a reboot is needed for Debian and Ubuntu boxes
    register: reboot_required_file
    stat: path=/var/run/reboot-required get_md5=no

  - name: Reboot the Debian or Ubuntu server
    reboot:
      msg: "Reboot initiated by Ansible due to kernel updates"
      connect_timeout: 5
      reboot_timeout: 300
      pre_reboot_delay: 0
      post_reboot_delay: 30
      test_command: uptime
    when: reboot_required_file.stat.exists

  - name: Install miscellaneous packages with apt
    apt:
      name: "{{ item }}"
      state: present
    with_items:
        - screenfetch
        - lolcat
        - ntp
        - apt-transport-https
        - gnupg2
        - ca-certificates
        - software-properties-common

  - name: Remove Swap entry from /etc/fstab.
    lineinfile:
      dest: /etc/fstab
      regexp: swap
      state: absent
    register: task_result

  - name: Set the swap to off
    shell:
      cmd: dphys-swapfile swapoff

  - name: Set the swap to off
    shell:
      cmd: dphys-swapfile uninstall

  - name: Set the swap to off
    shell:
      cmd: update-rc.d dphys-swapfile remove

  - name: Set the swap to off
    shell:
      cmd: systemctl disable dphys-swapfile.service

  - name: Ensure the swap size is 0
    lineinfile:
      path: /etc/dphys-swapfile
      regexp: '^CONF_SWAPSIZE'
      line: CONF_SWAPSIZE=0

  - name: Overclock to 1800GHz
    lineinfile:
      state: present
      insertafter: EOF
      dest: /boot/config.txt
      line: "{{ item }}"
    with_items:
      - 'over_voltage=5'
      - 'arm_freq=1800'
      - 'gpu_freq=750'
    register: task_result

  - name: Expand the file system (RaspberryPi OS)
    shell:
      cmd: raspi-config nonint do_expand_rootfs
    when: task_result is changed

  - name: Reboot the Debian or Ubuntu server
    reboot:
      connect_timeout: 5
      reboot_timeout: 300
      pre_reboot_delay: 0
      post_reboot_delay: 30
      test_command: uptime
    when: task_result is changed

  - name: add apt-key for Docker
    apt_key:
      url: https://download.docker.com/linux/debian/gpg
      state: present

  - name: add apt repo for Docker
    apt_repository:
      repo: deb https://download.docker.com/linux/debian buster stable
      state: present
      filename: 'docker'

  - name: install Docker
    apt:
      name: "{{ item }}"
      state: present
      update_cache: true
    with_items:
      - docker-ce
      - docker-compose

  - name: "Add to Docker group"
    user:
      name: "christian"
      groups: "docker"
      state: "present"

  - name: Starting docker service
    systemd:
      name: docker.service
      state: started
      enabled: yes

  - name: Download better htop
    get_url:
      url: https://github.com/avafinger/htop_2.2.2/releases/download/v1.8/htop_2.2.2-8_arm64.deb
      dest: /tmp/htop_2.2.2-8_arm64.deb

  - name: Installing htop
    shell: dpkg -i htop_2.2.2-8_arm64.deb
    args:
      chdir: /tmp/

  - name: Cleaning Up htop
    file:
      path: /tmp/htop_2.2.2-8_arm64.deb
      state: absent

  - name: Creating htop config directory
    become: yes
    become_user: christian
    file:
      path: /home/christian/.config/htop
      state: directory

  - name: Copy htoprc to config directory
    become: yes
    become_user: christian
    copy:
      src: "{{ lookup('env', 'PWD') }}/support/htoprc"
      dest: /home/christian/.config/htop/htoprc

  - name: Check cmdline.txt
    shell: cat /boot/cmdline.txt | grep -c 'lcgroup_enable=cpuset cgroup_enable=memory cgroup_memory=1 swapaccount=1' || true
    register: task_result

  - name: Adding to the end of cmdline.txt
    replace: dest=/boot/cmdline.txt regexp='(\s+)$' replace=' cgroup_enable=cpuset cgroup_enable=memory cgroup_memory=1 swapaccount=1'
    when: task_result is changed

  - name: Copy /etc/docker/daemon.json using symbolic representation
    copy:
      src: "{{ lookup('env', 'PWD') }}/Support/daemon.json"
      dest: /etc/docker/daemon.json
      mode: u=rw,g=r,o=r
    register: task_result

  - name: Uncomment line from /etc/sysctl.conf
    lineinfile:
      dest: /etc/sysctl.conf
      regexp: '^#net.ipv4.ip_forward=1'
      line: 'net.ipv4.ip_forward=1'
    register: task_result

  - name: switch nftables to iptables
    shell:
      cmd: "{{ item }}"
    loop:
      - update-alternatives --set iptables /usr/sbin/iptables-legacy
      - update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy

  - name: add Kubernetes apt-key
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: add Kubernetes' APT repository
    apt_repository:
      repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: 'kubernetes'

  - name: Wait for the reboot to complete if there was a change.
    reboot:
      connect_timeout: 5
      reboot_timeout: 300
      pre_reboot_delay: 0
      post_reboot_delay: 30
      test_command: uptime
    when: task_result is changed

  - name: install kubelet
    apt:
      name: kubelet=1.19.0-00
      state: present
      update_cache: true

  - name: install kubeadm
    apt:
      name: kubeadm=1.19.0-00
      state: present
